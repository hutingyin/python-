A = ['1','2']
B = [3,4]
那问题来了如何将A和B列表转换成字典呢？
代码如下：
--------------------------------------
A = ["1","2"]
B = [3,4]
C = dict([A,B])
输出如下：
{'1': '2', 3: 4}
结论：可以看出来列表中转换成字典 只是把各其中的列表元素分别作为key 和 value
----------------------------------------------------------------------
如果是生成两个列表的值互相对应的字典改怎么生成呢？
A = ["1","2"]
B = [3,4]
C = dict(zip(A,B))
输出结果为：
{'1': 3, '2': 4}
结论：可以看出来两个列表转变为了相互照应的字典，列表A的值作为key，列表B的值作为value
-----------------------------------------------------------------------------
下面我们来扩展一下：
字典的反向查询，根据字典的值查出来所属的键：
Reverse_query = list(C.keys())[list(C.values()).index(3)]
输出如下：
1
结论：字典的反应查询挺有用的()
------------------------------------------------------------------------------
我实际项目中遇到的案例：
项目需求：钉钉上发通知给用户,触发消息通知的条件是：项目到巡检时间了，就发送通知给这个项目中的项目经理！
刚开始的思路：通过钉钉接口我可以获取到用户userid,name这两个列表等等，这两个是我需要的，当项目到巡检时间的时候
，判断这个项目中的项目经理是否在公司name里表中，如果是，查出来userid。这里就用到了两个列表做字典然后反向查询的知识。
遇到的问题：公司name里面有重名的情况，存在重名的情况，只能查出来第一个，这样是行不通的。
解决办法：增加唯一性对照，name虽然可以重复，但是id不会重复，为此(在数据库表中新建了员工工号字段)我取出了每个人的工号(job_id)，
然后和userid列表做字典就可以取出来
